version: '3.8'

services:
  # 后端服务
  vabhub-backend:
    build:
      context: ../VabHub-Core
      dockerfile: Dockerfile.enhanced
    image: vabhub/backend:${VERSION:-latest}
    container_name: vabhub-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8090}:8090"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/vabhub.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - PLUGIN_DIR=/app/plugins
    volumes:
      - vabhub_data:/app/data
      - vabhub_plugins:/app/plugins
      - vabhub_logs:/app/logs
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vabhub-network

  # 前端服务
  vabhub-frontend:
    build:
      context: ../VabHub-Frontend
      dockerfile: Dockerfile.enhanced
    image: vabhub/frontend:${VERSION:-latest}
    container_name: vabhub-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    environment:
      - API_BASE_URL=http://vabhub-backend:8090
      - NODE_ENV=production
    depends_on:
      - vabhub-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vabhub-network

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: vabhub-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vabhub123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vabhub-network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: vabhub-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vabhub}
      - POSTGRES_USER=${POSTGRES_USER:-vabhub}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vabhub123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vabhub}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vabhub-network

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: vabhub-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - vabhub-backend
    networks:
      - vabhub-network

  # Grafana仪表盘
  grafana:
    image: grafana/grafana:latest
    container_name: vabhub-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - vabhub-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: vabhub-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - vabhub-frontend
      - vabhub-backend
    networks:
      - vabhub-network

  # 备份服务
  backup:
    image: alpine:latest
    container_name: vabhub-backup
    restart: unless-stopped
    volumes:
      - vabhub_data:/data
      - postgres_data:/postgres
      - redis_data:/redis
      - backup_data:/backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION=${BACKUP_RETENTION:-7}
    command: >
      sh -c "
      echo '${BACKUP_SCHEDULE} /backup/backup.sh' > /etc/crontabs/root &&
      crond -f -l 8
      "
    networks:
      - vabhub-network

volumes:
  vabhub_data:
    driver: local
  vabhub_plugins:
    driver: local
  vabhub_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local

networks:
  vabhub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16